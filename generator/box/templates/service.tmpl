type {{.ServiceType}}Client struct {
	cc    client.Client
	appID string
}

func New{{.ServiceType}}Client(appID string) (*{{.ServiceType}}Client, error) {
	cc, err := client.NewClient()
	if err != nil {
		return nil, err
	}
	return &{{.ServiceType}}Client{cc, appID}, nil
}

{{range .Methods}}
func (c *{{$.ServiceType}}Client) {{.Name}}(ctx context.Context, {{range .Params}}{{.Name}} {{.SigType}},{{end}}) ({{if .Response}}{{.Response.Type}},{{end}}error) {
    _content := &client.DataContent{ContentType: "application/json"}
    {{- if .Params}}
	params, encErr := json.Marshal(map[string]interface{}{
        {{- range .Params}}
		"{{.Name}}": {{.Name}},
        {{- end}}
	})
	if encErr != nil {
      return {{if .Response}}nil ,{{end}}errors.WithStack(encErr)
	}
	_content.Data = params
    {{- end}}
    {{- if .Response}}
    resp, err := c.cc.InvokeMethodWithContent(ctx, c.appID, "{{.Name}}", "post", _content)
    if err != nil {
        return nil, errors.WithStack(err)
    }
    if string(resp) == "null" {
      return nil, nil
    }
    var out {{trimPrefix .Response.Type "*"}}
    err = json.Unmarshal(resp, &out)
    if err != nil {
        return nil, errors.WithStack(err)
    }
    return {{if .Response.Ptr}}&{{end}}out, nil
    {{- else}}
    _, err := c.cc.InvokeMethodWithContent(ctx, c.appID, "{{.Name}}", "post", _content)
    return errors.WithStack(err)
    {{- end}}
}

func _{{$.ServiceType}}_{{.Name}}_Handler(srv {{$.ServiceType}}) dapr.InvocationHandlerFunc {
	return func(ctx context.Context, in *common.InvocationEvent) (out *common.Content, err error) {
		out = &common.Content{
			ContentType: "application/json",
		}
        {{- if .Params}}
        type Params struct {
          {{- range .Params}}
          {{upperFirst .Name}} {{.Type}}
          {{- end}}
        }
        var params Params
        decErr := json.Unmarshal(in.Data, &params)
        if decErr != nil {
            err = errors.WithStack(decErr)
            return
        }
        {{- end}}
		{{if .Response}}resp, {{end}}methodErr := srv.{{.Name}}(ctx{{range .Params}}, params.{{upperFirst .Name}}{{end}}{{if .Variadic}}...{{end}})
        if methodErr != nil {
            err = errors.WithStack(methodErr)
            return
        }
        {{- if .Response}}
        data, encErr := json.Marshal(resp)
        if encErr != nil {
            err = errors.WithStack(encErr)
            return
        }
        out.Data = data
        {{- end}}
		return
	}
}
{{end}}

func RegisterService(s common.Service, srv {{.ServiceType}}) {
{{- range .Methods}}
	s.AddServiceInvocationHandler("{{.Name}}", errorHandlers.ServiceErrorHandler(_{{$.ServiceType}}_{{.Name}}_Handler(srv)))
{{- end}}
}

func New{{.ServiceType}}Server(address string) (common.Service, error) {
	s, err := grpc.NewService(address)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return s, nil
}


func MustNew{{.ServiceType}}Server(address string) (common.Service) {
    svc, err := New{{.ServiceType}}Server(address)
    if err != nil {
      panic(err)
    }
    return svc
}
