type TopicHandlerFunc func(ctx context.Context, e *common.TopicEvent) (retry bool, err error)

{{range .Handlers}}
func _{{.EventName}}_Handler(subs Subscriptions) TopicHandlerFunc {
	return func(ctx context.Context, e *common.TopicEvent) (retry bool, err error) {
		var event {{.EventName}}
		err = json.Unmarshal([]byte(fmt.Sprintf("%v", e.Data.(interface{}))), &event)
		if err != nil {
			return false, err
		}
		return subs.{{.HandlerName}}(ctx, event)
	}
}
{{end}}

func RegisterTopicHandlers(s common.Service, subs Subscriptions, pubsubName string) {
    {{- range .Handlers}}
	s.AddTopicEventHandler(
		&common.Subscription{
			PubsubName: pubsubName,
			Topic:      "{{.EventName}}",
		},
		_{{.EventName}}_Handler(subs),
	)
    {{- end}}
}
